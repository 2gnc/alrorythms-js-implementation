const bubble = require('./02-bubble-sort');

describe('пузырьковая сортировка 1', () => {
  it('сортировка четного массива', () => {
    expect(bubble.b1([4, 1, 2, 3])).toEqual([1, 2, 3, 4]);
  });
  it('сортировка нечетного массива', () => {
    expect(bubble.b1([4, 1, 2, 3, 5])).toEqual([1, 2, 3, 4, 5]);
  });
  it('массив уже отсортирован', () => {
    expect(bubble.b1([1, 2, 3, 4, 5])).toEqual([1, 2, 3, 4, 5]);
  });
  it('массив одинаковых чисел', () => {
    expect(bubble.b1([1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1]);
  });
  it('пустой массив', () => {
    expect(bubble.b1([])).toEqual([]);
  });
  it('сортировка с отрицательными числами', () => {
    expect(bubble.b1([4, 1, -2, 3, 5])).toEqual([-2, 1, 3, 4, 5]);
  });
});

describe('пузырьковая сортировка 2', () => {
  it('сортировка четного массива', () => {
    expect(bubble.b2([4, 1, 2, 3])).toEqual([1, 2, 3, 4]);
  });
  it('сортировка нечетного массива', () => {
    expect(bubble.b2([4, 1, 2, 3, 5])).toEqual([1, 2, 3, 4, 5]);
  });
  it('массив уже отсортирован', () => {
    expect(bubble.b2([1, 2, 3, 4, 5])).toEqual([1, 2, 3, 4, 5]);
  });
  it('массив одинаковых чисел', () => {
    expect(bubble.b2([1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1]);
  });
  it('пустой массив', () => {
    expect(bubble.b2([])).toEqual([]);
  });
  it('сортировка с отрицательными числами', () => {
    expect(bubble.b2([4, 1, -2, 3, 5])).toEqual([-2, 1, 3, 4, 5]);
  });
});
